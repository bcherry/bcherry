#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4918
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FMySemanticLife.Engine
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="fmsldb")]
	public partial class EngineDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertScore(Score instance);
    partial void UpdateScore(Score instance);
    partial void DeleteScore(Score instance);
    partial void InsertTerm(Term instance);
    partial void UpdateTerm(Term instance);
    partial void DeleteTerm(Term instance);
    #endregion
		
		public EngineDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["fmsldbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EngineDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EngineDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EngineDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EngineDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Score> Scores
		{
			get
			{
				return this.GetTable<Score>();
			}
		}
		
		public System.Data.Linq.Table<Term> Terms
		{
			get
			{
				return this.GetTable<Term>();
			}
		}
	}
	
	[Table(Name="dbo.Scores")]
	public partial class Score : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Story1ID;
		
		private int _Story2ID;
		
		private double _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStory1IDChanging(int value);
    partial void OnStory1IDChanged();
    partial void OnStory2IDChanging(int value);
    partial void OnStory2IDChanged();
    partial void OnValueChanging(double value);
    partial void OnValueChanged();
    #endregion
		
		public Score()
		{
			OnCreated();
		}
		
		[Column(Storage="_Story1ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Story1ID
		{
			get
			{
				return this._Story1ID;
			}
			set
			{
				if ((this._Story1ID != value))
				{
					this.OnStory1IDChanging(value);
					this.SendPropertyChanging();
					this._Story1ID = value;
					this.SendPropertyChanged("Story1ID");
					this.OnStory1IDChanged();
				}
			}
		}
		
		[Column(Storage="_Story2ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Story2ID
		{
			get
			{
				return this._Story2ID;
			}
			set
			{
				if ((this._Story2ID != value))
				{
					this.OnStory2IDChanging(value);
					this.SendPropertyChanging();
					this._Story2ID = value;
					this.SendPropertyChanged("Story2ID");
					this.OnStory2IDChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Float NOT NULL")]
		public double Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Terms")]
	public partial class Term : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StoryID;
		
		private string _Text;
		
		private double _tf;
		
		private double _tfidf;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStoryIDChanging(int value);
    partial void OnStoryIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OntfChanging(double value);
    partial void OntfChanged();
    partial void OntfidfChanging(double value);
    partial void OntfidfChanged();
    #endregion
		
		public Term()
		{
			OnCreated();
		}
		
		[Column(Storage="_StoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StoryID
		{
			get
			{
				return this._StoryID;
			}
			set
			{
				if ((this._StoryID != value))
				{
					this.OnStoryIDChanging(value);
					this.SendPropertyChanging();
					this._StoryID = value;
					this.SendPropertyChanged("StoryID");
					this.OnStoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(250) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_tf", DbType="Float NOT NULL")]
		public double tf
		{
			get
			{
				return this._tf;
			}
			set
			{
				if ((this._tf != value))
				{
					this.OntfChanging(value);
					this.SendPropertyChanging();
					this._tf = value;
					this.SendPropertyChanged("tf");
					this.OntfChanged();
				}
			}
		}
		
		[Column(Storage="_tfidf", DbType="Float NOT NULL")]
		public double tfidf
		{
			get
			{
				return this._tfidf;
			}
			set
			{
				if ((this._tfidf != value))
				{
					this.OntfidfChanging(value);
					this.SendPropertyChanging();
					this._tfidf = value;
					this.SendPropertyChanged("tfidf");
					this.OntfidfChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
